When redirecting to another route or same route, and one wishes tto pass a variable along, assuming the variable is called myVar:

const myVar = 'someValue';

the variable can be passed through the query parameters in the URL:

res.redirect('/dashboard?myVar=${myVar}');

and then in the route handling '/dashboard', one can access the value of 'myVar' from the query parameters:

app.get('/dahsboard', (req, res) => {
  const myVar = req.query.myVar;
});

however, this approach exposes the variable in the URL, so if the variable is expected to be a sebsitive data, this is not a suitable way to do so.

another way to achieve this is by the use of sessions or cookies.

using sessions:

req.session.myVar = 'someValue';
res.redirect('/dashboard');

and then in the dahsboard route:

// Route handling "/dashboard"
app.get('/dashboard', (req, res) => {
  const myVar = req.session.myVar;

});

and to use session, we must set a session middleware in our express app.

import session from 'express-session';
import MongoStore from 'connect-mongo';

app.use(
  session({
    secret: process.env.SECRET,
    resave: false,
    saveUninitialized: true,
    store: MongoStore.create({
      mongoUrl: process.env.MONGODB_URI,
    }),
    cookie: {
      maxAge: 1000 * 60 * 60 * 24, // Session cookie lifespan in milliseconds (1 day in this example)
      secure: process.env.NODE_ENV === 'production', // Set to true in production if using HTTPS
      httpOnly: true, // Ensures that the cookie is only accessible by the web server, not client-side scripts
      sameSite: 'strict', // Protects against cross-site request forgery attacks
    },
  })
);
// The session middleware adds a req.session object to each request, allowing the storage
//  and retrieval of data specific to a user's session.

Regarding the sameSite option, it controls when the browser includes the cookie in a cross-site request. The possible values are:

'Strict': Cookies will only be sent in a first-party context (i.e., the site the user is currently visiting).
'Lax': Cookies are sent in top-level navigations and in first-party contexts, but not in cross-site requests initiated by third-party websites. This is the default value.
'None': Cookies will be sent in all contexts, including third-party requests.
Setting sameSite: 'strict' provides a higher level of security by preventing the browser from sending cookies in cross-site requests, which helps protect against certain types of attacks like Cross-Site Request Forgery (CSRF). However, it might affect the behavior of the application, especially if one has cross-site requests that rely on cookies.


and to send it over cookies:

// Before redirecting
res.cookie('myVar', 'someValue');
res.redirect('/dashboard');

in the dashboard handler

// Route handling "/dashboard"
app.get('/dashboard', (req, res) => {
  const myVar = req.cookies.myVar;
 
  res.render('dashboard', { myVar });
});

the express-session middleware is not limited to using only MongoStore for session storage. 

MemoryStore:

This is the default session store that comes with express-session. It stores session data in memory on the server. However, it is not suitable for production use in scenarios where you have multiple server instances or need to scale your application horizontally.
Example:


import session from 'express-session';

app.use(
  session({
    secret: 'your-secret-key',
    resave: false,
    saveUninitialized: false,
    store: new session.MemoryStore(),
  })
);


RedisStore:

Redis is an in-memory data structure store, and RedisStore uses Redis as the backend to store session data. It is a good choice for distributed and scalable applications.
Example:

import session from 'express-session';
import connectRedis from 'connect-redis';

const RedisStore = connectRedis(session);

app.use(
  session({
    secret: 'your-secret-key',
    resave: false,
    saveUninitialized: false,
    store: new RedisStore({ url: 'redis://localhost:6379' }),
  })
);


MySQLStore:

If you're using MySQL, you can use express-mysql-session or a similar package to store session data in a MySQL database.
Example:

import session from 'express-session';
import MySQLStore from 'express-mysql-session';

const MySQLStoreInstance = MySQLStore(session);

app.use(
  session({
    secret: 'your-secret-key',
    resave: false,
    saveUninitialized: false,
    store: new MySQLStoreInstance({
      host: 'localhost',
      user: 'root',
      password: 'your-mysql-password',
      database: 'your-database-name',
    }),
  })
);

MAKING DATAS AVAILABLE IN TEMPLATES:

res.locals.userToken = req.cookies.token;
res.locals.title = 'Registration Page';
res.locals.description = 'Register with us';
res.locals.firstname = '';
res.locals.lastname = '';
res.locals.email = '';
res.locals.password = '';
res.locals.password2 = '';

the above method can be used to make data available to templates or routes in a
current request-response cycle. meaning it will only be available for a single
request-response cycle.it won't be automatically available in a subsequent request.
If you need persistent user information across requests, you would typically use a
session or another form of authentication mechanism.