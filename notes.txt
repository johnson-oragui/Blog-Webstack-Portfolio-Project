When redirecting to another route or same route, and one wishes tto pass a variable along, assuming the variable is called myVar:

const myVar = 'someValue';

the variable can be passed through the query parameters in the URL:

res.redirect('/dashboard?myVar=${myVar}');

and then in the route handling '/dashboard', one can access the value of 'myVar' from the query parameters:

app.get('/dahsboard', (req, res) => {
  const myVar = req.query.myVar;
});

however, this approach exposes the variable in the URL, so if the variable is expected to be a sebsitive data, this is not a suitable way to do so.

another way to achieve this is by the use of sessions or cookies.

using sessions:

req.session.myVar = 'someValue';
res.redirect('/dashboard');

and then in the dahsboard route:

// Route handling "/dashboard"
app.get('/dashboard', (req, res) => {
  const myVar = req.session.myVar;

});

and to use session, we must set a session middleware in our express app.

import session from 'express-session';
import MongoStore from 'connect-mongo';

app.use(
  session({
    secret: process.env.SECRET,
    resave: false,
    saveUninitialized: true,
    store: MongoStore.create({
      mongoUrl: process.env.MONGODB_URI,
    }),
    cookie: {
      maxAge: 1000 * 60 * 60 * 24, // Session cookie lifespan in milliseconds (1 day in this example)
      secure: process.env.NODE_ENV === 'production', // Set to true in production if using HTTPS
      httpOnly: true, // Ensures that the cookie is only accessible by the web server, not client-side scripts
      sameSite: 'strict', // Protects against cross-site request forgery attacks
    },
  })
);
// The session middleware adds a req.session object to each request, allowing the storage
//  and retrieval of data specific to a user's session.

Regarding the sameSite option, it controls when the browser includes the cookie in a cross-site request. The possible values are:

'Strict': Cookies will only be sent in a first-party context (i.e., the site the user is currently visiting).
'Lax': Cookies are sent in top-level navigations and in first-party contexts, but not in cross-site requests initiated by third-party websites. This is the default value.
'None': Cookies will be sent in all contexts, including third-party requests.
Setting sameSite: 'strict' provides a higher level of security by preventing the browser from sending cookies in cross-site requests, which helps protect against certain types of attacks like Cross-Site Request Forgery (CSRF). However, it might affect the behavior of the application, especially if one has cross-site requests that rely on cookies.


and to send it over cookies:

// Before redirecting
res.cookie('myVar', 'someValue');
res.redirect('/dashboard');

in the dashboard handler

// Route handling "/dashboard"
app.get('/dashboard', (req, res) => {
  const myVar = req.cookies.myVar;
 
  res.render('dashboard', { myVar });
});

